type Time = int;
type Result_1 = 
 variant {
   err: JobErr;
   ok;
 };
type Result = 
 variant {
   err: ProfileErr;
   ok;
 };
type ProfileId = principal;
type ProfileErr = variant {IsAnonymous;};
type Profile = 
 record {
   accountId: text;
   firstSignIn: Time;
   lastVisit: Time;
   signInMethod: text;
 };
type JobId = nat;
type JobErr = 
 variant {
   Err;
   IsAnonymous;
 };
type Job = 
 record {
   applicationDiscord: text;
   applicationEmail: text;
   applicationTwitter: text;
   applicationUrl: text;
   category: text;
   companyLogoUrl: text;
   companyName: text;
   companyTwitter: text;
   companyWebsite: text;
   compensation: text;
   description: text;
   edited: Time;
   equity: text;
   publisher: text;
   sourceUrl: text;
   submitted: Time;
   title: text;
 };
service : {
  addJob: (Job) -> (Result_1);
  addJobTest: (Job) -> ();
  deleteJob: (JobId) -> ();
  getJobs: () -> (vec record {
                        JobId;
                        Job;
                      }) query;
  getJobsNum: () -> (nat) query;
  getProfile: () -> (opt Profile) query;
  getProfiles: () -> (vec record {
                            ProfileId;
                            Profile;
                          }) query;
  updateProfiles: (Profile) -> (Result);
  whoami: () -> (text) query;
}
